/**
 * 爬楼梯
 * 
 * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
 * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
 * 注意：给定 n 是一个正整数。
 * 
 * 示例 2：
 * 输入： 3
 * 输出： 3
 * 解释： 有三种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶 + 1 阶
 * 2.  1 阶 + 2 阶
 * 3.  2 阶 + 1 阶
 * 
 * 解法：动态规划思想, 也类似于斐波那契数列
 * 1. 处于楼梯1时只有1种，处于楼梯2时只有2种
 * 2. 当处于楼梯3时，楼梯3可以从楼梯1到达和楼梯2到达，因此：楼梯3 = 楼梯1 + 楼梯2
 * 3. 楼梯4 = 楼梯2 + 楼梯3
 */

#include<iostream>
using namespace std;

class Solution {
public:
    int climbStairs(int n) {
        if(n == 0)
            return 0;
        if(n == 1)
            return 1;
        if(n == 2)
            return 2;
        
        int a = 1, b = 2, c = 0;
        for(int i = 3; i <= n; i++) {
            c = a + b;
            a = b;
            b = c;
        }
        return c;
    }
};